import React, { Component } from 'react'
import { instanceOf } from 'prop-types'
import Video from 'twilio-video'
import axios from 'axios'
import { withCookies, Cookies } from 'react-cookie'
import queryString from 'query-string'

export default class VideoComponent extends Component {

  constructor(props) {
    super()
    const queryParams = queryString.parse(window.location.search)
    this.state = {
    identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
    roomName: '',    /* Will store the room name */
    roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
    previewTracks: null,
    localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
    hasJoinedRoom: false,
    activeRoom: null, // Track the current active room
    view: queryParams.view,
    propertyName: queryParams.propertyName,
  }

    this.joinRoom = this.joinRoom.bind(this)
    this.roomJoined = this.roomJoined.bind(this)
    this.leaveRoom = this.leaveRoom.bind(this)
    this.detachParticipantTracks = this.detachParticipantTracks.bind(this)
    this.detachTracks = this.detachTracks.bind(this)
    this.attachTracks = this.attachTracks.bind(this)
    this.renderLocalTrack = this.renderLocalTrack.bind(this)
  }

  componentDidMount() {
    let identity
    if (this.state.view === 'viewer') {
      const number = Math.floor(Math.random() * 100) + 1
      identity = `${this.state.view}${number}`
    } else {
      identity = this.state.view
    }

    axios.get('/token', {
      params: {
        identity: identity,
      }
    }).then(results => {
      /* Make an API call to get the token and identity(fake name) and  update the corresponding state variables. */
      const { identity, token } = results.data
      this.setState({ identity, token })
      // console.log('Joining room ' + this.state.propertyName + '...')
      let connectOptions

      if (this.state.view === 'viewer') {
        connectOptions = {
          name: this.state.propertyName,
          audio: true,
          // tracks: []
        }
      } else {
        connectOptions  = {
          name: this.state.propertyName,
          audio: true,
          video: {
            facingMode: 'environment'
          }
        }
      }

      const constraints = {
        video: {
          facingMode: 'environment'
        }
      }
      if (this.state.previewTracks) {
          connectOptions.tracks = this.state.previewTracks
      }
      Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
        alert('Could not connect to Twilio: ' + error.message)
      })
    })
  }

  joinRoom() {
    /* Show an error message on room name text field if user tries joining a room without providing a room name. This is enabled by setting `roomNameErr` to true */
    if (!this.state.roomName.trim()) {
        this.setState({ roomNameErr: true })
        return
    }

    // console.log("Joining room '" + this.state.roomName + "'...")
    let connectOptions = {
        name: this.state.roomName
    }

    if (this.state.previewTracks) {
        connectOptions.tracks = this.state.previewTracks
    }

    /* Connect to a room by providing the token and connection options that include the room name and tracks. We also show an alert if an error occurs while connecting to the room. */
    Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
      alert('Could not connect to Twilio: ' + error.message)
    })
  }

  leaveRoom() {
    this.state.activeRoom.disconnect()
    this.setState({ hasJoinedRoom: false, localMediaAvailable: false })
  }

  attachTracks(tracks, container) {
    tracks.forEach(track => {
      container.appendChild(track.attach())
    })
  }

  detachTracks(tracks) {
    tracks.forEach(track => {
      track.detach().forEach(detachedElement => {
        detachedElement.remove()
      })
    })
  }

  detachParticipantTracks(participant) {
    const tracks = Array.from(participant.tracks.values())
    this.detachTracks(tracks)
  }

  // Attach the Participant's Tracks to the DOM.
  attachParticipantTracks(participant, container) {
    // if (this.state.view === 'presenter') {
    const tracks = Array.from(participant.tracks.values())
    this.attachTracks(tracks, container)
    // }
  }

  roomJoined(room) {
    window.room = room
    if (this.state.view === 'presenter') {
      this.setState({
        activeRoom: room,
        localMediaAvailable: true,
        hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
      })
      // Attach LocalParticipant's tracks to the DOM, if not already attached.
      const previewContainer = this.refs.localMedia
      if (!previewContainer.querySelector('video')) {
        this.attachParticipantTracks(room.localParticipant, previewContainer)
      }
      // Participant joining room
      room.on('participantConnected', participant => {
        // console.log("Joining: '" + participant.identity + "'")
      })
    }
    // Attach participant’s tracks to DOM when they add a track
    if (this.state.view === 'viewer') {
      room.on('trackAdded', (track, participant) => {
        // if (track.kind === 'audio') {
        //   track.attach('#remote-media')
        //   // var previewContainer = this.refs.remoteMedia
        //   // this.attachTracks([track], previewContainer)
        // }
        // console.log(participant.identity + ' added track: ' + track.kind)
        const previewContainer = this.refs.remoteMedia
        this.attachTracks([track], previewContainer)
        if (participant.identity === 'presenter') {
          if (track.kind === 'video') {

            // Wait for the video to be ready to check dimensions
            setTimeout(() => {
              if (track.dimensions.width > track.dimensions.height) {
                this.setState({
                  orientation: 'landscape'
                })
              } else {
                this.setState({
                  orientation: 'portrait'
                })
              }
            }, 3000)
          }
          this.attachTracks([track], previewContainer)
        }
      })
    }
    // Detach participant’s track from DOM when they remove a track.
    room.on('trackRemoved', (track, participant) => {
      // console.log(participant.identity + ' removed track: ' + track.kind)
      this.detachTracks([track])
    })

    // Detach all participant’s track when they leave a room.
    room.on('participantDisconnected', participant => {
      // console.log("Participant '" + participant.identity + "' left the room")
      this.detachParticipantTracks(participant)
    })

    // Once the local participant leaves the room, detach the Tracks
    // of all other participants, including that of the LocalParticipant.
    room.on('disconnected', () => {
      if (this.state.previewTracks) {
        this.state.previewTracks.forEach(track => {
          track.stop()
        })
      }
      this.detachParticipantTracks(room.localParticipant)
      room.participants.forEach(this.detachParticipantTracks)
      this.state.activeRoom = null
      this.setState({ hasJoinedRoom: false, localMediaAvailable: false })
    })
  }

  renderLocalTrack() {
    if (this.state.localMediaAvailable) {
      return <div className="flex-item"><div ref="localMedia" /> </div>
    }
    return ''
  }

  render() {
    return (
      <div className="content">
        {this.state.view === 'presenter' && this.renderLocalTrack()}
        {this.state.view === 'viewer' && <div ref="remoteMedia" id="remote-media" />}
      </div>
    )
  }
}
