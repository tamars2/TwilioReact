import React, { Component } from 'react'
import { instanceOf } from 'prop-types'
import Video from 'twilio-video'
import axios from 'axios'
import { withCookies, Cookies } from 'react-cookie'
import queryString from 'query-string'
class VideoComponent extends Component {
  static propTypes = {
    cookies: instanceOf(Cookies).isRequired
    }

  constructor(props) {
    super()
    const { cookies } = props
    const queryParams = queryString.parse(window.location.search)
    this.state = {
      identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
      roomName: '',    /* Will store the room name */
      roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
      previewTracks: null,
      localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
      hasJoinedRoom: false,
      activeRoom: null, // Track the current active room
      view: queryParams.view,
      propertyName: queryParams.propertyName,
      createRoom: cookies.get('createRoom') || undefined,
      joinRoom: cookies.get('joinRoom') || undefined,
      orientation: 'portrait',
    }

    this.joinRoom = this.joinRoom.bind(this)
    this.handleRoomNameChange = this.handleRoomNameChange.bind(this)
    this.roomJoined = this.roomJoined.bind(this)
    this.leaveRoom = this.leaveRoom.bind(this)
    this.detachParticipantTracks = this.detachParticipantTracks.bind(this)
    this.getDevices = this.getDevices.bind(this)
    this.detachTracks = this.detachTracks.bind(this)
    this.attachTracks = this.attachTracks.bind(this)
    this.updateVideoDevice = this.updateVideoDevice.bind(this)
    this.renderLocalTrack = this.renderLocalTrack.bind(this)
  }

  componentDidMount() {
    let identity
    if (this.state.view === 'viewer') {
      const number = Math.floor(Math.random() * 100) + 1
      identity = `${this.state.view}${number}`
    } else {
      identity = this.state.view
    }

    axios.get('/token', {
      params: {
        identity: identity,
      }
    }).then(results => {
      /* Make an API call to get the token and identity(fake name) and  update the corresponding state variables. */
      const { identity, token } = results.data
      this.setState({ identity, token })
      // console.log('Joining room ' + this.state.propertyName + '...')
      let connectOptions = {
          name: this.state.propertyName
      }
      if (this.state.previewTracks) {
          connectOptions.tracks = this.state.previewTracks
      }
      Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
        alert('Could not connect to Twilio: ' + error.message)
      })
      navigator.mediaDevices.enumerateDevices().then(this.getDevices)
    })
  }

  handleRoomNameChange(e) {
    /* Fetch room name from text field and update state */
        let roomName = e.target.value
        this.setState({ roomName })
      }

  joinRoom() {
    /* Show an error message on room name text field if user tries joining a room without providing a room name. This is enabled by setting `roomNameErr` to true */
    if (!this.state.roomName.trim()) {
        this.setState({ roomNameErr: true })
        return
    }

    // console.log("Joining room '" + this.state.roomName + "'...")
    let connectOptions = {
        name: this.state.roomName
    }

    if (this.state.previewTracks) {
        connectOptions.tracks = this.state.previewTracks
    }

    /* Connect to a room by providing the token and connection options that include the room name and tracks. We also show an alert if an error occurs while connecting to the room. */
    Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
      alert('Could not connect to Twilio: ' + error.message)
    })
  }

  leaveRoom() {
    this.state.activeRoom.disconnect()
    this.setState({ hasJoinedRoom: false, localMediaAvailable: false })
  }

  attachTracks(tracks, container) {
    tracks.forEach(track => {
      container.appendChild(track.attach())
    })
  }

  detachTracks(tracks) {
    tracks.forEach(track => {
      track.detach().forEach(detachedElement => {
        detachedElement.remove()
      })
    })
  }

  detachParticipantTracks(participant) {
    var tracks = Array.from(participant.tracks.values())
    this.detachTracks(tracks)
  }

  // Attach the Participant's Tracks to the DOM.
  attachParticipantTracks(participant, container) {
    if (this.state.view === 'presenter') {
      var tracks = Array.from(participant.tracks.values())
      this.attachTracks(tracks, container)
    }
  }

  getDevices(mediaDevices) {
    const select = document.getElementById('video-devices')
    select.innerHTML = ''
    select.appendChild(document.createElement('option'))
    let count = 1
    mediaDevices.forEach(mediaDevice => {
      if (mediaDevice.kind === 'videoinput') {
        const option = document.createElement('option')
        option.value = mediaDevice.deviceId
        const label = mediaDevice.label || `Camera ${count  }`
        const textNode = document.createTextNode(label)
        option.appendChild(textNode)
        select.appendChild(option)
        count += 1
      }
    })
  }

  updateVideoDevice(event) {
    const select = event.target
    const localParticipant = room.localParticipant

    if (select.value !== '') {
      Video.createLocalVideoTrack({
        deviceId: { exact: select.value }
      }).then( (localVideoTrack) => {
        const tracks = Array.from(localParticipant.videoTracks.values())
        localParticipant.unpublishTracks(tracks)
        // console.log(localParticipant.identity + " removed track: " + tracks[0].kind)
        tracks.forEach(track => {
          track.detach().forEach(detachedElement => {
            detachedElement.remove()
          })
        })
        localParticipant.publishTrack(localVideoTrack)
        // console.log(localParticipant.identity + " added track: " + localVideoTrack.kind)
        const previewContainer = this.refs.localMedia
        if (!previewContainer.querySelector('video')) {
          this.attachParticipantTracks(room.localParticipant, previewContainer)
        }
        // attachTracks([localVideoTrack], previewContainer)
      })
    }
  }

  roomJoined(room) {
    window.room = room
    if (this.state.view === 'presenter') {
      const select = document.getElementById('video-devices')
      select.addEventListener('change', this.updateVideoDevice)
      // Called when a participant joins a room
      // console.log("Joined as '" + this.state.identity + "'")
      this.setState({
        activeRoom: room,
        localMediaAvailable: true,
        hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
      })

      // Attach LocalParticipant's tracks to the DOM, if not already attached.
      var previewContainer = this.refs.localMedia
      if (!previewContainer.querySelector('video')) {
        this.attachParticipantTracks(room.localParticipant, previewContainer)
      }
      // // Attach the Tracks of the room's participants.
      // room.participants.forEach(participant => {
      //   console.log("Already in Room: '" + participant.identity + "'")
      //   var previewContainer = this.refs.remoteMedia
      //   this.attachParticipantTracks(participant, previewContainer)
      // })
      // Participant joining room
      room.on('participantConnected', participant => {
        // console.log("Joining: '" + participant.identity + "'")
      })
    }
    // Attach participant’s tracks to DOM when they add a track
    if (this.state.view === 'viewer') {
      room.on('trackAdded', (track, participant) => {
        console.log('PARTICIPANT ADDED: ', participant.identity)
        // console.log(participant.identity + ' added track: ' + track.kind)
        if (participant.identity === 'presenter') {
          var previewContainer = this.refs.remoteMedia
          if (track.kind === 'video') {

            // Wait for the video to be ready to check dimensions
            setTimeout(() => {
              if (track.dimensions.width > track.dimensions.height) {
                this.setState({
                  orientation: 'landscape'
                })
              } else {
                this.setState({
                  orientation: 'portrait'
                })
              }
            }, 3000)
          }
          this.attachTracks([track], previewContainer)
        }
      })
    }
    // Detach participant’s track from DOM when they remove a track.
    room.on('trackRemoved', (track, participant) => {
      // console.log(participant.identity + ' removed track: ' + track.kind)
      this.detachTracks([track])
    })

    // Detach all participant’s track when they leave a room.
    room.on('participantDisconnected', participant => {
      // console.log("Participant '" + participant.identity + "' left the room")
      this.detachParticipantTracks(participant)
    })

    // Once the local participant leaves the room, detach the Tracks
    // of all other participants, including that of the LocalParticipant.
    room.on('disconnected', () => {
      console.log('DISCONNECTED')
      if (this.state.previewTracks) {
        this.state.previewTracks.forEach(track => {
          track.stop()
        })
      }
      this.detachParticipantTracks(room.localParticipant)
      room.participants.forEach(this.detachParticipantTracks)
      this.state.activeRoom = null
      // select.removeEventListener('change', this.updateVideoDevice)
      this.setState({ hasJoinedRoom: false, localMediaAvailable: false })
    })
  }

  renderLocalTrack() {
    if (this.state.localMediaAvailable) {
      return <div className="flex-item"><div ref="localMedia" /> </div>
    }
    return ''
  }

  render() {
    /*
    Controls showing of the local track
    Only show video track after user has joined a room else show nothing
    */

    /*
    Controls showing of ‘Join Room’ or ‘Leave Room’ button.
    Hide 'Join Room' button if user has already joined a room otherwise
    show `Leave Room` button.
    */
    return (
      <div className="content">
        {this.state.view === 'presenter' && this.renderLocalTrack()} {/* Show local track if available */}
        <div>
          <select id="video-devices"></select>
        </div>
        {/* The following div element shows all remote media (other participant’s tracks) */}
        {this.state.view === 'viewer' && <div ref="remoteMedia" id="remote-media" className={`orientation-${this.state.orientation}`} />}
      </div>
    )
  }
}

export default withCookies(VideoComponent)
